{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.components.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","e","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAGaA,EAAO,SAAAC,GAChB,OACI,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,eACtB,6BAAKL,EAAMI,QAAQE,OACnB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAW,SAAAR,GACpB,OACI,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAAWA,GAAvBA,EAAQC,UCLhBM,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACjC,OACA,uBACIZ,UAAY,SACZa,KAAO,SACPF,YAAeA,EACfG,SAAYF,MCiCTG,E,kDApCb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACVR,SAAW,GACXS,YAAc,IALL,E,qDASd,WAAoB,IAAD,OACjBC,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAWc,S,oBAI3C,WAAU,IAAD,SACuBE,KAAKR,MAA5BR,EADA,EACAA,SAASS,EADT,EACSA,YACVQ,EAAmBjB,EAASkB,QAAO,SAAAvB,GAAO,OAC9CA,EAAQE,KAAKsB,cAAcC,SAASX,EAAYU,kBAElD,OAEE,sBAAK3B,UAAU,MAAf,UACE,oBAAIA,UAAU,KAAd,sBACA,cAAC,EAAD,CACAW,YAAc,kBACdC,aAAe,SAAAiB,GAAC,OAAI,EAAKN,SAAS,CAACN,YAAcY,EAAEC,OAAOC,WAE1D,cAAC,EAAD,CACEvB,SAAYiB,W,GA/BJO,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4439835d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css';\r\n\r\nexport const Card = props =>{\r\n    return (\r\n        <div className='card-container'>\r\n        <img alt='monster' src = {`https://robohash.org/${props.monster.id}?set=set2`}/>\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './card-list.styles.css';\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = props => {\r\n    return(\r\n        <div className='card-list'>\r\n          {props.monsters.map(monster => (\r\n          <Card key={monster.id} monster = {monster}/>\r\n        ))}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({ placeholder, handleChange}) => {\r\n        return(\r\n        <input\r\n            className = 'search'\r\n            type = 'search'\r\n            placeholder = {placeholder}\r\n            onChange = {handleChange}\r\n        />\r\n        )\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport { CardList } from './components/card-list/card-list.components';\nimport { SearchBox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n  constructor() {\n    super()\n  \n    this.state = {\n       monsters : [],\n       searchField : ''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters : users}));\n  }\n  \n  \n  render() {\n    const {monsters,searchField}= this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()));\n      \n    return (\n     \n      <div className=\"App\">\n        <h1 className='h1'>Monsters</h1>\n        <SearchBox \n        placeholder = 'search monsters'\n        handleChange ={e => this.setState({searchField : e.target.value})}\n        />\n        <CardList\n          monsters = {filteredMonsters}\n        /> \n      </div>\n    );\n  }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}